// 트리 :에지로 연결된 노드의 집합

// root : 트리의 최상위 노드
// parent : 부모노드
// child : 자식노드
// leaf : 자식노드가 없는 노드 
// path : 한 노드에서 다른 노드로 도달하는데 사용한 에지의 모음
// tree traversal : 트리의 모든 노드를 일정한 순서로 방문하는 것 - 트리탐색

// 이진트리 : 자식의 수가 2개 이하인 트리, 자식의 수를 2개 이하로 제한해 트리의 데이터삽입, 데이터 검색, 데이터 삭제를 매우 효율적으로 수행할 수 있다.
// 이진 검색 트리 : 작은 값을 왼쪽 노드에 큰 값을 오른쪽 노드에 저장한다. 데이터를 매우 효율적으로 검색할 수 있다. 단어, 문자열도 저장할 수 있다. 

// BST
// BST클래스에서는 중위(inorder), 전위(preorder), 후위(postorder)라는 세 가지 탐색 방법을 사용한다. 
// 중위탐색 : 노드의 오름차순 키 값으로 BST 클래스의 모든 노드를 방문한다. > 재귀를 이용
// 전위탐색 : 루트노드를 방문한 다음 왼쪽 자식을 중심으로 하는 서브트리 같은 방식으로 방문한 다음 오른쪽 서브트리를 같은 방식으로 방문  
// 후위탐색 : 루트노드의 왼쪽 자식을 중심으로 하는 서브트리를 먼저 방문한 다음 루트 노드의 오른쪽 자식을 중심으로 하는 서브트리를 방문하며, 마지막으로 루트노트를 방문한다. 

// 1. 특정값 검색 2. 최솟값 검색 3. 최댓값 검색